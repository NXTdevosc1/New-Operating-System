
Basically the algorithm consists of 3 Data structures :

- The Heap Image : Main Structure

- The Address Map : A multi level tree consisting of bi-bitmaps, UINT64[0] for StartAddress and UINT64[1] for EndAddress
- The Size Map : {
    Consists of a multi level tree of single bitmaps, representing 8 bits of size and pointing to the next bitmap
    at the end a chain of unmapped heap descriptors pointed to by the bitmap
}


Easily, This is the allocation routine :

RecentHeap.Length >= RequestedLength ? Take from RecentHeap : Search in the Size map for a larger Heap

This is the freeing routine :

Heap = Find(HeapAddress)
if(HeapAddress.Initial) {
    Image.Callback(RELEASE); // call the release function
} else {
    OriginalHeap = FindEndAddr(HeapAddress + Heap.Length)
    OriginalHeap.Length += Heap.Length;
    Remove(Heap)
}